import React, { useEffect, useState } from 'react';
import { StatusBar } from 'expo-status-bar';
import { NavigationContainer } from '@react-navigation/native';
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';
import { createStackNavigator } from '@react-navigation/stack';
import { GestureHandlerRootView } from 'react-native-gesture-handler';
import { SafeAreaProvider } from 'react-native-safe-area-context';
import { useColorScheme, ActivityIndicator, View, StyleSheet, Text } from 'react-native';
import * as SplashScreen from 'expo-splash-screen';
import * as Notifications from 'expo-notifications';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { Colors } from './src/constants/colors';

// Import screens
import OnboardingScreen from './src/screens/OnboardingScreen';
import LoginScreen from './src/screens/LoginScreen';
import SignupScreen from './src/screens/SignupScreen';
import HomeScreen from './src/screens/HomeScreen';
import PrayerTimerScreen from './src/screens/PrayerTimerScreen';
import PracticesScreen from './src/screens/PracticesScreen';
import PrayerRequestsScreen from './src/screens/PrayerRequestsScreen';
import SettingsScreen from './src/screens/SettingsScreen';
import StatisticsScreen from './src/screens/StatisticsScreen';
// Christian Habits Screens
import ChristianHabitsScreen from './src/screens/ChristianHabitsScreen';
import GratitudeJournalScreen from './src/screens/GratitudeJournalScreen';
import FastingTrackerScreen from './src/screens/FastingTrackerScreen';
// Privacy and Terms Screens
import PrivacyPolicyScreen from './src/screens/PrivacyPolicyScreen';
import TermsOfServiceScreen from './src/screens/TermsOfServiceScreen';
import SubscriptionScreen from './src/screens/SubscriptionScreen';

// Import components
import CustomTabBar from './src/components/CustomTabBar';
import AuthWrapper from './src/components/AuthWrapper';
import ErrorBoundary from './src/components/ErrorBoundary';
import { ThemeProvider, useTheme } from './src/context/ThemeContext';
import { AuthProvider } from './src/context/AuthContext';
// Temporarily disable SubscriptionProvider to fix blank screen
// import { SubscriptionProvider } from './src/context/SubscriptionContext';

// Configure notifications
Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowAlert: true,
    shouldPlaySound: true,
    shouldSetBadge: false,
    shouldShowBanner: false,
    shouldShowList: false,
  }),
});

// Keep the splash screen visible while we fetch resources
SplashScreen.preventAutoHideAsync();

const Tab = createBottomTabNavigator();
const Stack = createStackNavigator();

function TabNavigator() {
  const { colors } = useTheme();
  return (
    <Tab.Navigator
      tabBar={(props) => <CustomTabBar {...props} />}
      screenOptions={{
        headerShown: false,
        tabBarStyle: {
          backgroundColor: colors.background,
          borderTopWidth: 0,
          elevation: 0,
        },
      }}
    >
      <Tab.Screen 
        name="Home" 
        component={HomeScreen}
        options={{
        }}
      />
      <Tab.Screen 
        name="Prayer" 
        component={PrayerTimerScreen}
        options={{
        }}
      />
      <Tab.Screen 
        name="ChristianHabits" 
        component={ChristianHabitsScreen}
        options={{
        }}
      />
      <Tab.Screen 
        name="Profile" 
        component={SettingsScreen}
        options={{
        }}
      />
    </Tab.Navigator>
  );
}

export default function App() {
  const [isReady, setIsReady] = useState(false);
  const [hasCompletedOnboarding, setHasCompletedOnboarding] = useState(false);
  const [isAuthenticated, setIsAuthenticated] = useState<boolean | null>(null); // null = unknown, true = authenticated, false = not authenticated
  const [debugInfo, setDebugInfo] = useState<string[]>([]);
  const colorScheme = useColorScheme();

  const addDebugInfo = (info: string) => {
    console.log('DEBUG:', info);
    setDebugInfo(prev => [...prev, `${new Date().toISOString()}: ${info}`]);
  };

  useEffect(() => {
    addDebugInfo('App useEffect started');
    
    async function prepare() {
      try {
        addDebugInfo('Starting app preparation');
        
        // Check if user has completed onboarding
        const onboardingComplete = await AsyncStorage.getItem('onboarding_complete');
        addDebugInfo(`Onboarding complete: ${onboardingComplete}`);
        setHasCompletedOnboarding(onboardingComplete === 'true');

        // Request notification permissions
        addDebugInfo('Requesting notification permissions');
        const { status } = await Notifications.requestPermissionsAsync();
        addDebugInfo(`Notification permission status: ${status}`);
        if (status !== 'granted') {
          console.log('Notification permissions not granted');
        }

        // Pre-load any necessary resources
        addDebugInfo('Waiting for resources to load');
        await new Promise(resolve => setTimeout(resolve, 500));
        
        addDebugInfo('App preparation completed');
      } catch (e) {
        addDebugInfo(`App initialization error: ${e}`);
        console.error('App initialization error:', e);
      } finally {
        addDebugInfo('Setting isReady to true');
        setIsReady(true);
        await SplashScreen.hideAsync();
        addDebugInfo('Splash screen hidden');
      }
    }

    prepare();
  }, []);

  if (!isReady) {
    addDebugInfo('Rendering loading screen');
    return (
      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: Colors.light.background }}>
        <ActivityIndicator size="large" color={Colors.light.primary} />
        <Text style={{ marginTop: 20, color: Colors.light.text }}>Loading...</Text>
        <Text style={{ marginTop: 10, color: Colors.light.textSecondary, fontSize: 12 }}>
          Debug: {debugInfo.length} steps completed
        </Text>
      </View>
    );
  }

  addDebugInfo(`App render - isReady: ${isReady}, hasCompletedOnboarding: ${hasCompletedOnboarding}, isAuthenticated: ${isAuthenticated}`);

  // Simplified render for debugging
  addDebugInfo('Rendering main app structure');
  
  return (
    <ErrorBoundary>
      <GestureHandlerRootView style={{ flex: 1 }}>
        <SafeAreaProvider>
          <ThemeProvider>
            <AuthProvider>
              <AuthWrapper onAuthStateChange={(isAuth) => {
                addDebugInfo(`AuthWrapper callback - isAuth: ${isAuth}`);
                setIsAuthenticated(isAuth);
              }}>
                <NavigationContainer>
                  <StatusBar style="auto" />
                  <View style={{ flex: 1, backgroundColor: Colors.light.background }}>
                    <Text style={{ color: Colors.light.text, padding: 20 }}>
                      Debug Info: {debugInfo.length} steps
                    </Text>
                    <Text style={{ color: Colors.light.text, padding: 20 }}>
                      Onboarding: {hasCompletedOnboarding ? 'Yes' : 'No'}
                    </Text>
                    <Text style={{ color: Colors.light.text, padding: 20 }}>
                      Auth: {isAuthenticated === null ? 'Loading' : isAuthenticated ? 'Yes' : 'No'}
                    </Text>
                    
                    {!hasCompletedOnboarding ? (
                      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
                        <Text style={{ color: Colors.light.text, fontSize: 18 }}>Onboarding Screen</Text>
                        <OnboardingScreen navigation={{}} />
                      </View>
                    ) : isAuthenticated === null ? (
                      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
                        <ActivityIndicator size="large" color={Colors.light.primary} />
                        <Text style={{ color: Colors.light.text, marginTop: 10 }}>Checking authentication...</Text>
                      </View>
                    ) : !isAuthenticated ? (
                      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
                        <Text style={{ color: Colors.light.text, fontSize: 18 }}>Login Screen</Text>
                        <LoginScreen navigation={{}} />
                      </View>
                    ) : (
                      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
                        <Text style={{ color: Colors.light.text, fontSize: 18 }}>Main App</Text>
                        <TabNavigator />
                      </View>
                    )}
                  </View>
                </NavigationContainer>
              </AuthWrapper>
            </AuthProvider>
          </ThemeProvider>
        </SafeAreaProvider>
      </GestureHandlerRootView>
    </ErrorBoundary>
  );
}
